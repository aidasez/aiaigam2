import os
import calendar
import subprocess
import pandas as pd
from pathlib import Path
from datetime import datetime

# ---------------- Configuration ----------------
SCRIPT_DIR = Path(__file__).parent.resolve()

# ---------------- Helpers ----------------
def get_month_days():
    """Return a list of day numbers from 1 to today in the current month."""
    now = datetime.now()
    return list(range(1, now.day + 1))

def format_confidence(value):
    """Format confidence value for HTML table cell."""
    if pd.isna(value) or str(value).strip() == '':
        return '<td class="px-6 py-4 text-center text-gray-400">N/A</td>'
    str_value = str(value).strip()
    display_value = str_value if str_value.endswith('%') else f"{str_value}%"
    return f'<td class="px-6 py-4 text-center font-semibold text-blue-600">{display_value}</td>'

def create_html_table_row(row):
    fixture = row.get('Fixture', 'N/A')
    pick = row.get('Pick', 'N/A')
    ai_conf = format_confidence(row.get('AI_Confidence'))
    olbg_conf = format_confidence(row.get('OLBG_Confidence'))
    oddsp_conf = format_confidence(row.get('Oddspedia_Confidence'))
    return f"""
    <tr class="bg-white border-b hover:bg-gray-50 transition-colors duration-150">
        <td class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap">{fixture}</td>
        <td class="px-6 py-4">{pick}</td>
        {ai_conf}
        {olbg_conf}
        {oddsp_conf}
    </tr>
    """

# ---------------- HTML Generation ----------------
def generate_day_html(folder_path, file_path):
    """Generate HTML for a single day's data."""
    if not file_path.exists():
        print(f"File does not exist: {file_path}")
        return None

    try:
        if file_path.suffix == '.xlsx':
            df = pd.read_excel(file_path)
        elif file_path.suffix == '.csv':
            try:
                df = pd.read_csv(file_path, encoding='utf-8')
            except UnicodeDecodeError:
                df = pd.read_csv(file_path, encoding='windows-1252')
        else:
            print(f"Unsupported file type: {file_path}")
            return None
    except Exception as e:
        print(f"Error reading {file_path}: {e}")
        return None

    rows_html = ""
    for _, row in df.iterrows():
        if all(col in row for col in ['Fixture', 'Pick', 'AI_Confidence', 'OLBG_Confidence', 'Oddspedia_Confidence']):
            rows_html += create_html_table_row(row)

    html_file = folder_path / f"{file_path.stem}_predictions.html"
    content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>{file_path.stem} Predictions</title>
<script src="https://cdn.tailwindcss.com"></script>
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
<style>body {{ font-family: 'Inter', sans-serif; min-height:100vh; }}</style>
</head>
<body class="bg-gray-100 text-gray-800 flex flex-col">
<div class="container mx-auto p-4 sm:p-6 lg:p-8 flex-grow">
<header class="text-center mb-8 bg-white p-6 rounded-xl shadow-md">
<h1 class="text-3xl sm:text-4xl font-extrabold text-indigo-700">Football Predictions</h1>
<p class="text-md text-gray-600 mt-2">Confidence Levels (Auto-generated)</p>
</header>
<div class="bg-white rounded-xl shadow-lg overflow-hidden">
<div class="overflow-x-auto">
<table class="w-full text-sm text-left text-gray-600">
<thead class="text-xs text-gray-700 uppercase bg-indigo-50/70 border-b border-indigo-200">
<tr>
<th class="px-6 py-3 min-w-[250px] font-bold text-indigo-800">Fixture</th>
<th class="px-6 py-3 font-bold text-indigo-800">Pick</th>
<th class="px-6 py-3 text-center font-bold text-indigo-800">AI Confidence</th>
<th class="px-6 py-3 text-center font-bold text-indigo-800">OLBG Confidence</th>
<th class="px-6 py-3 text-center font-bold text-indigo-800">Oddspedia Confidence</th>
</tr>
</thead>
<tbody>
{rows_html if rows_html else '<tr><td colspan="5" class="text-center p-8 text-gray-500">No data found.</td></tr>'}
</tbody>
</table>
</div>
</div>
</div>
<footer class="text-center p-4 mt-auto text-sm text-gray-500 bg-white shadow-inner border-t border-gray-200">
<p>Auto-generated by Python script.</p>
</footer>
</body>
</html>
"""
    with open(html_file, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"Generated {html_file}")
    return html_file.name

# ---------------- Index File ----------------
def generate_index():
    """Generate main index.html with buttons for all existing day files."""
    month_name = datetime.now().strftime("%B")
    buttons_html = ""

    for day in get_month_days():
        folder_name = datetime(datetime.now().year, datetime.now().month, day).strftime("%Y-%m-%d")
        folder_path = SCRIPT_DIR / folder_name
        if not folder_path.exists():
            continue
        for file in folder_path.iterdir():
            if file.name.endswith('_predictions.html'):
                buttons_html += f"""
        <a href="{folder_name}/{file.name}" class="w-full py-4 px-6 bg-green-600 hover:bg-green-700 text-white font-bold text-lg rounded-xl shadow-lg transition duration-300 transform hover:scale-[1.03] text-center">
            View {file.stem.replace('_predictions','.html')} Predictions
        </a>
"""

    index_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>{month_name} Predictions Dashboard</title>
<script src="https://cdn.tailwindcss.com"></script>
<style>body {{ font-family: 'Inter', sans-serif; background-color: #eef2f6; }}</style>
</head>
<body class="min-h-screen flex items-center justify-center p-4">
<div class="w-full max-w-5xl bg-white shadow-2xl rounded-3xl p-8 md:p-12 border border-gray-100">
<header class="text-center mb-10">
<h1 class="text-5xl font-extrabold text-gray-900 mb-3">Forecasts for {month_name}</h1>
<p class="text-xl text-gray-600">Select a day below to view its detailed forecast.</p>
</header>
<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
{buttons_html if buttons_html else '<p class="text-center col-span-full text-gray-500 text-xl py-8">No prediction files found for this month.</p>'}
</div>
<footer class="mt-12 text-center text-sm text-gray-500 pt-6 border-t border-gray-100">
Run the script to generate missing day files.
</footer>
</div>
</body>
</html>
"""
    with open(SCRIPT_DIR / "index.html", 'w', encoding='utf-8') as f:
        f.write(index_content)
    print("Generated index.html")

# ---------------- Git Push ----------------
def push_to_github():
    try:
        subprocess.run(["git", "add", "."], check=True, capture_output=True, text=True)
        today_str = datetime.now().strftime("%Y-%m-%d %H:%M")
        subprocess.run(["git", "commit", "-m", f"Auto-generated HTML update {today_str}"], check=True, capture_output=True, text=True)
        subprocess.run(["git", "push", "origin", "main"], check=True, capture_output=True, text=True)
        print("Successfully pushed to GitHub.")
    except subprocess.CalledProcessError as e:
        print(f"Git command failed: {e.stderr}")

# ---------------- Main ----------------
if __name__ == "__main__":
    for day in get_month_days():
        folder_name = datetime(datetime.now().year, datetime.now().month, day).strftime("%Y-%m-%d")
        folder_path = SCRIPT_DIR / folder_name
        os.makedirs(folder_path, exist_ok=True)

        # Check for a file like "DD_combined_confidence.xlsx" in that folder
        file_path = folder_path / f"{day:02d}_combined_confidence.xlsx"
        if file_path.exists():
            generate_day_html(folder_path, file_path)
        else:
            print(f"No data file for {folder_name}")

    generate_index()
    push_to_github()
